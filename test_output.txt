
> @docbrasil/mynd-echarts@1.0.0 test:coverage
> vitest run --coverage


 RUN  v1.6.1 /Users/augustopissarra/dev/docbrasil/gits/mynd-echarts
      Coverage enabled with v8

 ✓ tests/unit/composables/useChartData.spec.ts  (37 tests) 14ms
 ✓ tests/unit/types/utilities.spec.ts  (41 tests) 8ms
 ✓ tests/unit/types/guards.spec.ts  (44 tests) 9ms
 ✓ tests/unit/composables/useChartOptions.spec.ts  (27 tests) 20ms
 ✓ tests/unit/composables/useChartEvents.spec.ts  (23 tests) 45ms
 ✓ tests/unit/composables/useChartAnimation.spec.ts  (26 tests) 70ms
 ✓ tests/unit/components/BaseCheckbox.spec.ts  (24 tests) 80ms
 ✓ tests/unit/composables/useLocale.spec.ts  (21 tests) 81ms
 ❯ tests/unit/comprehensive-coverage.spec.ts  (15 tests | 4 failed) 113ms
   ❯ tests/unit/comprehensive-coverage.spec.ts > Comprehensive Coverage Tests > Components > ToastContainer > should render toasts
     → expected '' to contain 'Test message'
   ❯ tests/unit/comprehensive-coverage.spec.ts > Comprehensive Coverage Tests > Composables > useToast > should create toasts
     → expected 'Test message' to be 'Success!' // Object.is equality
   ❯ tests/unit/comprehensive-coverage.spec.ts > Comprehensive Coverage Tests > Composables > useLocale > should handle locale switching
     → expected 'Chart Configuration' to be 'Configuración del Gráfico' // Object.is equality
   ❯ tests/unit/comprehensive-coverage.spec.ts > Comprehensive Coverage Tests > Integration Tests > should integrate multiple composables
     → expected undefined to be 'dark' // Object.is equality
 ❯ tests/unit/coverage-boost.spec.ts  (13 tests | 11 failed) 99ms
   ❯ tests/unit/coverage-boost.spec.ts > Coverage Boost Tests > Locale Messages > should have all required locale messages
     → expected undefined not to be undefined
   ❯ tests/unit/coverage-boost.spec.ts > Coverage Boost Tests > Locale Messages > should get locale through index
     → expected { configDialog: { …(13) }, …(1) } to be undefined // Object.is equality
   ❯ tests/unit/coverage-boost.spec.ts > Coverage Boost Tests > useChartAnimation > should manage animation options
     → Cannot read properties of undefined (reading 'animation')
   ❯ tests/unit/coverage-boost.spec.ts > Coverage Boost Tests > useChartAnimation > should handle animation lifecycle methods
     → Cannot read properties of undefined (reading 'animation')
   ❯ tests/unit/coverage-boost.spec.ts > Coverage Boost Tests > useChartData > should transform and process data
     → vm.transformData is not a function
   ❯ tests/unit/coverage-boost.spec.ts > Coverage Boost Tests > useChartData > should create series data
     → vm.createSeriesData is not a function
   ❯ tests/unit/coverage-boost.spec.ts > Coverage Boost Tests > useChartEvents > should manage chart events
     → vm.onChartEvent is not a function
   ❯ tests/unit/coverage-boost.spec.ts > Coverage Boost Tests > useChartOptions > should manage and merge chart options
     → Cannot read properties of undefined (reading 'title')
   ❯ tests/unit/coverage-boost.spec.ts > Coverage Boost Tests > useChartResize > should handle chart resizing in component context
     → vm.resizeChart is not a function
   ❯ tests/unit/coverage-boost.spec.ts > Coverage Boost Tests > useChartTheme > should manage chart themes
     → the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string
   ❯ tests/unit/coverage-boost.spec.ts > Coverage Boost Tests > useLocale and useTranslation > should work in component context
     → expected 'en' to be 'es' // Object.is equality
 ❯ tests/unit/components/MyndEcharts.spec.ts  (33 tests | 20 failed) 353ms
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Component Mounting and Props > should handle different className formats
     → expected false to be true // Object.is equality
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > ECharts Instance Lifecycle > should initialize ECharts on mount
     → expected "spy" to be called with arguments: [ { series: [] }, …(1) ]

Received: 

  1st spy call:

  Array [
    Object {
      "series": Array [],
+     "toolbox": Object {
+       "feature": Object {
+         "dataView": Object {
+           "readOnly": false,
+           "show": false,
+         },
+         "dataZoom": Object {
+           "show": false,
+         },
+         "magicType": Object {
+           "show": false,
+           "type": Array [
+             "line",
+             "bar",
+           ],
+         },
+         "restore": Object {
+           "show": true,
+         },
+         "saveAsImage": Object {
+           "backgroundColor": "auto",
+           "name": "chart",
+           "pixelRatio": 2,
+           "show": true,
+           "type": "png",
+         },
+       },
+       "itemGap": 10,
+       "itemSize": 15,
+       "orient": "horizontal",
+       "right": 10,
+       "show": true,
+       "showTitle": true,
+       "top": 10,
+     },
    },
    Object {
      "lazyUpdate": false,
      "notMerge": false,
      "silent": false,
    },
  ]

  2nd spy call:

  Array [
    Object {
-     "series": Array [],
+     "toolbox": Object {
+       "feature": Object {
+         "dataView": Object {
+           "readOnly": false,
+           "show": false,
+         },
+         "dataZoom": Object {
+           "show": false,
+         },
+         "magicType": Object {
+           "show": false,
+           "type": Array [
+             "line",
+             "bar",
+           ],
+         },
+         "restore": Object {
+           "show": true,
+         },
+         "saveAsImage": Object {
+           "backgroundColor": "auto",
+           "name": "chart",
+           "pixelRatio": 2,
+           "show": true,
+           "type": "png",
+         },
+       },
+       "itemGap": 10,
+       "itemSize": 15,
+       "orient": "horizontal",
+       "right": 10,
+       "show": true,
+       "showTitle": true,
+       "top": 10,
      },
+   },
    Object {
      "lazyUpdate": false,
      "notMerge": false,
-     "silent": false,
+     "silent": true,
    },
  ]

  3rd spy call:

  Array [
    Object {
-     "series": Array [],
+     "toolbox": Object {
+       "feature": Object {
+         "dataView": Object {
+           "readOnly": false,
+           "show": false,
+         },
+         "dataZoom": Object {
+           "show": false,
+         },
+         "magicType": Object {
+           "show": false,
+           "type": Array [
+             "line",
+             "bar",
+           ],
+         },
+         "restore": Object {
+           "show": true,
+         },
+         "saveAsImage": Object {
+           "backgroundColor": "auto",
+           "name": "chart",
+           "pixelRatio": 2,
+           "show": true,
+           "type": "png",
+         },
+       },
+       "itemGap": 10,
+       "itemSize": 15,
+       "orient": "horizontal",
+       "right": 10,
+       "show": true,
+       "showTitle": true,
+       "top": 10,
      },
+   },
    Object {
      "lazyUpdate": false,
      "notMerge": false,
-     "silent": false,
+     "silent": true,
    },
  ]


Number of calls: 3

   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > ECharts Instance Lifecycle > should handle loading with custom options
     → expected "spy" to be called with arguments: [ 'default', { …(3) } ]

Received: 



Number of calls: 0

   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Reactive Updates > should update chart when options change
     → expected "spy" to be called with arguments: [ { series: [ { …(2) } ] }, …(1) ]

Received: 

  1st spy call:

  Array [
    Object {
      "series": Array [
        Object {
          "data": Array [
            4,
            5,
            6,
          ],
          "type": "line",
        },
      ],
+     "toolbox": Object {
+       "feature": Object {
+         "dataView": Object {
+           "readOnly": false,
+           "show": false,
+         },
+         "dataZoom": Object {
+           "show": false,
+         },
+         "magicType": Object {
+           "show": false,
+           "type": Array [
+             "line",
+             "bar",
+           ],
+         },
+         "restore": Object {
+           "show": true,
+         },
+         "saveAsImage": Object {
+           "backgroundColor": "auto",
+           "name": "chart",
+           "pixelRatio": 2,
+           "show": true,
+           "type": "png",
+         },
+       },
+       "itemGap": 10,
+       "itemSize": 15,
+       "orient": "horizontal",
+       "right": 10,
+       "show": true,
+       "showTitle": true,
+       "top": 10,
+     },
    },
    Object {
      "lazyUpdate": false,
      "notMerge": false,
      "silent": false,
    },
  ]

  2nd spy call:

  Array [
    Object {
-     "series": Array [
-       Object {
-         "data": Array [
-           4,
-           5,
-           6,
+     "toolbox": Object {
+       "feature": Object {
+         "dataView": Object {
+           "readOnly": false,
+           "show": false,
+         },
+         "dataZoom": Object {
+           "show": false,
+         },
+         "magicType": Object {
+           "show": false,
+           "type": Array [
+             "line",
+             "bar",
            ],
-         "type": "line",
+         },
+         "restore": Object {
+           "show": true,
+         },
+         "saveAsImage": Object {
+           "backgroundColor": "auto",
+           "name": "chart",
+           "pixelRatio": 2,
+           "show": true,
+           "type": "png",
+         },
+       },
+       "itemGap": 10,
+       "itemSize": 15,
+       "orient": "horizontal",
+       "right": 10,
+       "show": true,
+       "showTitle": true,
+       "top": 10,
      },
-     ],
    },
    Object {
      "lazyUpdate": false,
      "notMerge": false,
-     "silent": false,
+     "silent": true,
    },
  ]


Number of calls: 2

   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Reactive Updates > should handle option update with custom merge settings
     → expected "spy" to be called with arguments: [ …(2) ]

Received: 

  1st spy call:

  Array [
    Object {
      "series": Array [
        Object {
          "type": "bar",
        },
      ],
+     "toolbox": Object {
+       "feature": Object {
+         "dataView": Object {
+           "readOnly": false,
+           "show": false,
+         },
+         "dataZoom": Object {
+           "show": false,
+         },
+         "magicType": Object {
+           "show": false,
+           "type": Array [
+             "line",
+             "bar",
+           ],
+         },
+         "restore": Object {
+           "show": true,
+         },
+         "saveAsImage": Object {
+           "backgroundColor": "auto",
+           "name": "chart",
+           "pixelRatio": 2,
+           "show": true,
+           "type": "png",
+         },
+       },
+       "itemGap": 10,
+       "itemSize": 15,
+       "orient": "horizontal",
+       "right": 10,
+       "show": true,
+       "showTitle": true,
+       "top": 10,
+     },
    },
    Object {
      "lazyUpdate": true,
      "notMerge": true,
      "silent": true,
    },
  ]

  2nd spy call:

  Array [
    Object {
-     "series": Array [
-       Object {
-         "type": "bar",
+     "toolbox": Object {
+       "feature": Object {
+         "dataView": Object {
+           "readOnly": false,
+           "show": false,
+         },
+         "dataZoom": Object {
+           "show": false,
          },
+         "magicType": Object {
+           "show": false,
+           "type": Array [
+             "line",
+             "bar",
            ],
+         },
+         "restore": Object {
+           "show": true,
+         },
+         "saveAsImage": Object {
+           "backgroundColor": "auto",
+           "name": "chart",
+           "pixelRatio": 2,
+           "show": true,
+           "type": "png",
          },
+       },
+       "itemGap": 10,
+       "itemSize": 15,
+       "orient": "horizontal",
+       "right": 10,
+       "show": true,
+       "showTitle": true,
+       "top": 10,
+     },
+   },
    Object {
-     "lazyUpdate": true,
-     "notMerge": true,
+     "lazyUpdate": false,
+     "notMerge": false,
      "silent": true,
    },
  ]


Number of calls: 2

   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Reactive Updates > should handle locale changes
     → expected "spy" to be called at least once
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Auto Resize > should setup resize observer when autoResize is true
     → undefined is not a spy or a call to a spy!
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Auto Resize > should not setup resize observer when autoResize is false
     → undefined is not a spy or a call to a spy!
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Auto Resize > should handle resize callback
     → Cannot read properties of undefined (reading 'mockImplementation')
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Exposed Methods > should expose chart instance and methods
     → expected { setOption: [Function spy], …(18) } to be { setOption: [Function spy], …(18) } // Object.is equality

If it should pass with deep equality, replace "toBe" with "toStrictEqual"

Expected: { setOption: [Function spy], …(18) }
Received: serializes to the same string

   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Exposed Methods > should expose utility methods
     → expected undefined to deeply equal [ 100, 200 ]
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Error Scenarios > should handle chart initialization failure gracefully
     → expected "error" to be called at least once
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Error Scenarios > should handle setOption failure gracefully
     → expected "error" to be called at least once
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Error Scenarios > should handle dispose errors gracefully
     → expected [Function] to not throw an error but 'Error: Dispose failed' was thrown
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > ConfigDialog Integration > should open config dialog
     → Cannot read properties of null (reading '$')
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > ConfigDialog Integration > should pass current options to config dialog
     → Cannot read properties of null (reading 'openConfig')
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > ConfigDialog Integration > should handle locale updates from config dialog
     → Cannot read properties of null (reading 'openConfig')
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Complex Scenarios > should handle rapid option updates
     → Cannot read properties of null (reading '$parent')
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Complex Scenarios > should handle simultaneous prop updates
     → Cannot read properties of null (reading '$parent')
   ❯ tests/unit/components/MyndEcharts.spec.ts > MyndEcharts > Complex Scenarios > should maintain chart state during theme switch
     → Cannot read properties of null (reading '$parent')
 ✓ tests/unit/components/BaseSelect.spec.ts  (24 tests) 509ms
 ❯ tests/unit/components/ConfigDialog-fixed.spec.ts  (17 tests | 8 failed) 460ms
   ❯ tests/unit/components/ConfigDialog-fixed.spec.ts > ConfigDialog - Fixed Teleport Tests > Dialog Header > should emit close when close button clicked
     → expected undefined to deeply equal [ false ]
   ❯ tests/unit/components/ConfigDialog-fixed.spec.ts > ConfigDialog - Fixed Teleport Tests > Form Inputs > should update title when input changes
     → expected undefined to be truthy
   ❯ tests/unit/components/ConfigDialog-fixed.spec.ts > ConfigDialog - Fixed Teleport Tests > Form Inputs > should handle color picker changes
     → expected undefined to be truthy
   ❯ tests/unit/components/ConfigDialog-fixed.spec.ts > ConfigDialog - Fixed Teleport Tests > Language Selector > should emit locale change
     → expected undefined to deeply equal [ 'es' ]
   ❯ tests/unit/components/ConfigDialog-fixed.spec.ts > ConfigDialog - Fixed Teleport Tests > Footer Actions > should reset options when reset clicked
     → expected undefined to be truthy
   ❯ tests/unit/components/ConfigDialog-fixed.spec.ts > ConfigDialog - Fixed Teleport Tests > Footer Actions > should close dialog when apply clicked
     → expected undefined to deeply equal [ false ]
   ❯ tests/unit/components/ConfigDialog-fixed.spec.ts > ConfigDialog - Fixed Teleport Tests > Overlay Behavior > should close when overlay clicked
     → expected undefined to deeply equal [ false ]
   ❯ tests/unit/components/ConfigDialog-fixed.spec.ts > ConfigDialog - Fixed Teleport Tests > Complex Options > should preserve unmodified options
     → Cannot read properties of undefined (reading 'xAxis')
 ❯ tests/unit/components/ConfigDialog.spec.ts  (31 tests | 29 failed) 607ms
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Component Mounting > should render when modelValue is true
     → expected null to be truthy
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Component Mounting > should use Teleport to body
     → expected false to be true // Object.is equality
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Dialog Header > should display localized title
     → expected undefined to be 'Chart Configuration' // Object.is equality
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Dialog Header > should have close button
     → expected null to be truthy
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Dialog Header > should close dialog when close button clicked
     → expected undefined to deeply equal [ false ]
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Accordion Sections > should render all sections
     → expected 0 to be greater than 5
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Accordion Sections > should toggle section visibility
     → Cannot read properties of undefined (reading 'find')
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Accordion Sections > should show expand/collapse icons
     → Cannot read properties of undefined (reading 'find')
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Title Section > should initialize with chart title values
     → Cannot read properties of undefined (reading 'element')
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Title Section > should update options when title text changes
     → Cannot read properties of undefined (reading 'setValue')
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Title Section > should handle position dropdown
     → Cannot read properties of undefined (reading 'setValue')
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Title Section > should handle color picker
     → Cannot call setValue on an empty DOMWrapper.
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Legend Section > should handle show legend checkbox
     → Cannot read properties of undefined (reading 'trigger')
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Legend Section > should handle orientation dropdown
     → Cannot read properties of undefined (reading 'trigger')
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Tooltip Section > should handle formatter textarea
     → Cannot read properties of undefined (reading 'trigger')
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Tooltip Section > should show formatter help text
     → Cannot read properties of undefined (reading 'trigger')
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Colors Section > should display color palette
     → expected [] to have a length of 3 but got +0
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Colors Section > should add new color
     → Cannot call trigger on an empty DOMWrapper.
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Colors Section > should remove color
     → Cannot call trigger on an empty DOMWrapper.
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Language Section > should display language selector
     → expected false to be true // Object.is equality
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Language Section > should emit locale change
     → Cannot call setValue on an empty DOMWrapper.
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Footer Actions > should reset options
     → Cannot call trigger on an empty DOMWrapper.
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Footer Actions > should apply and close
     → Cannot call trigger on an empty DOMWrapper.
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Overlay Behavior > should close on overlay click
     → Cannot call trigger on an empty DOMWrapper.
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Overlay Behavior > should not close on dialog content click
     → Cannot call trigger on an empty DOMWrapper.
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Complex Options Handling > should handle deeply nested options
     → Cannot call element on an empty DOMWrapper.
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Complex Options Handling > should preserve unmanaged options
     → Cannot call setValue on an empty DOMWrapper.
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Error Handling > should handle missing options gracefully
     → Cannot call element on an empty DOMWrapper.
   ❯ tests/unit/components/ConfigDialog.spec.ts > ConfigDialog > Error Handling > should handle invalid color values
     → Cannot call element on an empty DOMWrapper.
 ✓ tests/unit/composables/useECharts.spec.ts  (25 tests) 160ms
 ✓ tests/unit/composables/useChartResize.spec.ts  (11 tests) 53ms
 ✓ tests/unit/utils/index.spec.ts  (15 tests) 13ms
 ✓ tests/unit/composables/useToast.spec.ts  (22 tests) 20ms
 ✓ tests/unit/components/BaseInput.spec.ts  (28 tests) 99ms
 ❯ tests/unit/simple-coverage.spec.ts  (15 tests | 6 failed) 108ms
   ❯ tests/unit/simple-coverage.spec.ts > Simple Coverage Tests > MyndEcharts Component > should handle various props
     → expected [ 'mynd-echarts-wrapper' ] to include 'my-chart'
   ❯ tests/unit/simple-coverage.spec.ts > Simple Coverage Tests > Toast System > ToastContainer should render toasts
     → expected '' to contain 'Test toast'
   ❯ tests/unit/simple-coverage.spec.ts > Simple Coverage Tests > Locale System > should switch locales
     → expected 'Chart Configuration' to be 'Configuración del Gráfico' // Object.is equality
   ❯ tests/unit/simple-coverage.spec.ts > Simple Coverage Tests > Chart Composables > useChartResize should handle resize
     → expected 'undefined' to be 'function' // Object.is equality
   ❯ tests/unit/simple-coverage.spec.ts > Simple Coverage Tests > Chart Composables > useChartTheme should manage themes
     → registerCustomTheme is not a function
   ❯ tests/unit/simple-coverage.spec.ts > Simple Coverage Tests > Integration > should integrate multiple features
     → expected 'Test' to contain 'Chart loaded!'
 ✓ tests/unit/components/ConfigDialog-final.spec.ts  (16 tests) 228ms
 ✓ tests/unit/components/ConfigDialog-teleport.spec.ts  (16 tests) 209ms
 ❯ tests/unit/components/ConfigDialog-simple.spec.ts  (8 tests | 5 failed) 102ms
   ❯ tests/unit/components/ConfigDialog-simple.spec.ts > ConfigDialog - Simple Tests > Basic Rendering > should render when modelValue is true
     → expected null to be truthy
   ❯ tests/unit/components/ConfigDialog-simple.spec.ts > ConfigDialog - Simple Tests > Basic Rendering > should emit update:modelValue when close is triggered
     → vm.closeDialog is not a function
   ❯ tests/unit/components/ConfigDialog-simple.spec.ts > ConfigDialog - Simple Tests > Basic Rendering > should emit update:options when options are updated
     → vm.updateOptions is not a function
   ❯ tests/unit/components/ConfigDialog-simple.spec.ts > ConfigDialog - Simple Tests > Basic Rendering > should emit update:locale when locale is changed
     → vm.updateLocale is not a function
   ❯ tests/unit/components/ConfigDialog-simple.spec.ts > ConfigDialog - Simple Tests > Component Methods > should have required methods exposed
     → expected 'undefined' to be 'function' // Object.is equality
 ✓ tests/unit/composables/index.spec.ts  (10 tests) 3ms
 ✓ tests/unit/composables/useChartTheme.spec.ts  (14 tests) 17ms

⎯⎯⎯⎯⎯⎯ Unhandled Errors ⎯⎯⎯⎯⎯⎯

Vitest caught 1 unhandled error during the test run.
This might cause false positive tests. Resolve unhandled errors to make sure your tests are not affected.
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
 Test Files  7 failed | 18 passed (25)
      Tests  83 failed | 473 passed (556)
     Errors  1 error
   Start at  16:17:02
   Duration  2.97s (transform 4.88s, setup 3ms, collect 10.36s, tests 3.48s, environment 15.14s, prepare 2.83s)

